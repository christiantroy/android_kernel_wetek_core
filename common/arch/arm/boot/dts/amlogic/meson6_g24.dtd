/*
 * Amlogic-MX SKT Device Tree Source
 *
 * Copyright Amlogic 2013
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 */

/dts-v1/;
/{
	compatible = "AMLOGIC,8726_MX";
	model = "AMLOGIC";
	interrupt-parent = <&gic>;
	#address-cells = <1>;
	#size-cells = <1>;

    cpus {
        #address-cells = <1>;
        #size-cells = <0>;

        cpu@0 {
            device_type = "cpu";
            compatible = "arm,cortex-a9";
            reg = <0x200>;
        };
        cpu@1 {
            device_type = "cpu";
            compatible = "arm,cortex-a9";
            reg = <0x1>;
        };
    };

	/*start  memory config*/
	memory{
		device_type = "memory";
		aml_reserved_start = <0x84000000>;
		aml_reserved_end = <0x90cfffff>;
		phys_offset = <0x80000000>;
		linux,usable-memory = <0x80000000 0x04000000 0x90d00000 0x0f200000 0xa0000000 0x20000000>; 
	};
	
    gic:interrupt-controller{
        compatible = "arm,cortex-a9-gic";
        reg = <0xc4301000 0x1000
               0xc4300100 0x0100>;
        interrupt-controller;
        #interrupt-cells = <3>;
        #address-cells = <0>;
    };

/// ***************************************************************************************
///	-	ION
//$$ MODULE="ION"
//$$ DEVICE="ion_dev"
//$$ L2 PROP_STR = "status"
    ion_dev{
        compatible = "amlogic,ion_dev";
        dev_name = "ion_dev";
        status = "ok";
//        reg = <0x18200000 0x03000000>;
    };
    
	mesonfb{
		compatible = "amlogic,mesonfb";
		dev_name = "mesonfb";
		reg = <0x84100000 0x00600000
	   	 		0x84700000 0x00100000>;
 		vmode = <2>; /*0:VMODE_720P 1:VMODE_LCD  2:VMODE_LVDS_1080P*/
 		display_size_default = <1920 1080 1920 2160 32>;
	};

	mesonfb-ext{
		compatible = "amlogic,mesonfb-ext";
		dev_name = "mesonfb-ext";
		reg = <0x84800000 0x00600000
	       	 0x84e00000 0x00100000>;
	       display_size_default = <1024 768 1024 1536 32>;
	};

	mesonstream{
		compatible = "amlogic,mesonstream";
		dev_name = "mesonstream.0";
		reg = <0x84f00000 0x04000000
						0x8fe00000 0x00f00000>;
	};
	
	vdin0{
		compatible = "amlogic,vdin";
		dev_name = "vdin";
		reg = <0x88f00000 0x04000000
					0x88f00000 0x04000000>;
		irq = <115>;
                vdin_id = <0>;
	};

	vm{
		compatible = "amlogic,vm";
		dev_name = "vm.0";
		reg = <0x8cf00000 0x01000000>;
	};

	ppmgr{
		compatible = "amlogic,ppmgr";
		dev_name = "ppmgr";
		reg = <0x8ee00000 0x00fc0000>;		
	};

	/*end*/
	
	usb_con {
		lm-compatible = "logicmodule-bus";
					
		usb_b{
			lm-compatible = "amlogic,usb";
			lm-periph-id = <1>; /* lm name */
			clock-src = "usb1";
			port-id = <1>; /* ref to mach/usb.h */
			port-type = <1>;	/* 0: otg, 1: host, 2: slave */
			port-speed = <0>; /* 0: default, 1: high, 2: full */
			port-config = <0>; /* 0: default */
			port-dma = <0>; /* 0: default, 1: single, 2: incr, 3: incr4, 4: incr8, 5: incr16, 6: disable*/
			port-id-mode = <1>; /* 0: hardware, 1: sw_host, 2: sw_slave*/
		};

		usb_a{
			lm-compatible = "amlogic,usb";
			lm-periph-id = <0>; /* lm name */
			clock-src = "usb0";
			port-id = <0>; /* ref to mach/usb.h */
			port-type = <0>;	/* 0: otg, 1: host, 2: slave */
			port-speed = <0>; /* 0: default, high, 1: full */
			port-config = <0>; /* 0: default */
			port-dma = <0>; /* 0: default, 1: single, 2: incr, 3: incr4, 4: incr8, 5: incr16, 6: disable*/
			port-id-mode = <0>; /* 0: hardware, 1: sw_host, 2: sw_slave*/
			gpio-vbus-power = "GPIOD_9";
			gpio-work-mask	= <1>; /*0: work on pulldown,1:work on pullup*/
		};
	};

	rtc{
		compatible = "amlogic,aml_rtc";
	};
	
	uart_ao{
		compatible = "amlogic,aml_uart";
		port_name = "uart_ao";
		status = "okay";
		dev_name = "uart_ao";
		pinctrl-names = "default";
		pinctrl-0 = <&ao_uart_pins>;
	};
	
	uart_0{
		compatible = "amlogic,aml_uart";
		port_name = "uart_a";
		status = "okay";
		dev_name = "uart_0";
        pinctrl-names = "default";
        pinctrl-0 = <&a_uart_pins>;
	};
	
	uart_1{
		compatible = "amlogic,aml_uart";
		port_name = "uart_b";
		status = "disabled";
		dev_name = "uart_1";
	};
	
	uart_2{
		compatible = "amlogic,aml_uart";
		port_name = "uart_c";
		status = "disabled";
		dev_name = "uart_2";
	};
	
	uart_3{
		compatible = "amlogic,aml_uart";
		port_name = "uart_d";
		status = "ok";
		dev_name = "uart_3";
	};
	aml_pm{
		compatible = "amlogic,pm";
		dev_name = "aml_pm";
	};
    cpufreq-meson{
        compatible = "amlogic,cpufreq-meson";
        status = "okay";
    };
    meson_vcck_dvfs_driver{
        compatible = "amlogic, meson_vcck_dvfs";
        pinctrl-names = "default";
        pinctrl-0 = <&aml_pwm_pins>;
        use_pwm = <0>; 
        table_count = <16>;
        cs_voltage_table = <
        /*   
         * Note: This table is hardware depended, If your hardware use PWM method,
         * then first line in this table is PWM register value, second line is
         * voltage of VCCK according this PWM register value. If your platform use
         * constant-current source to adjust vcck voltage, then the first line should 
         * set to 0, means not valid, member 'use_pwm' in this node should set to 0.
         *
         *  ---- This table must be in ascending order by voltage ----
         *    
         *  PWM value       VCCK voltage 
         */   
            0x0              996000
            0x0             1018000
            0x0             1039000
            0x0             1061000
            0x0             1082000
            0x0             1104000
            0x0             1126000
            0x0             1147000
            0x0             1169000
            0x0             1190000
            0x0             1212000
            0x0             1234000
            0x0             1255000
            0x0             1277000
            0x0             1298000
            0x0             1307000
        >;   
    };   

    dvfs {
        compatible = "amlogic, amlogic-dvfs";                   /** fixed for driver, don't change       */
        #address-cells = <1>;
        #size-cells = <0>;
        status = "ok";

        vcck_dvfs {
            dvfs_id     = <1>;                                  /** must be value of (1 << n)            */
            table_count = <7>;                                 /** must be correct count for dvfs_table */
            dvfs_table  = <
                /* NOTE: frequent in this table must be ascending order */
                /* frequent(Khz)    min_uV      max_uV                  */
                 200000              996000      996000
                 600000             1039000     1039000
                 840000             1104000     1104000
                1080000             1147000     1147000
                1200000             1212000     1212000
                1320000             1298000     1298000
                1500000             1307000     1307000
            >;
        };
    };

    battery_parameter:battery_parameter{
        pmu_twi_id = <2>;                   /* AXP20_I2CBUS                         */
        pmu_irq_id = <0>;                   /* INT_WATCHDOG                         */
        pmu_twi_addr = <0x34>;              /* AXP20_ADDR                           */
        pmu_battery_rdc = <87>;             /* battery internal resistor            */
        pmu_battery_cap = <7200>;           /* battery capacity                     */
        pmu_battery_technology = <4>;       /* POWER_SUPPLY_TECHNOLOGY_LiFe         */
        pmu_battery_name = "PTI PL336078";  /* battery name                         */
        pmu_init_chgvol = <4200000>;        /* target charge voltage                */
        pmu_init_chgend_rate = <10>;        /* set initial charing end current rate */
        pmu_init_chg_enabled = <1>;         /* set initial charing enabled          */
        pmu_init_adc_freq = <25>;           /* set initial adc frequency            */
        pmu_init_adc_freqc = <100>;         /* set initial coulomb adc coufrequency */
        pmu_init_chg_pretime = <50>;        /* set initial pre-charging time        */
        pmu_init_chg_csttime = <720>;       /* set initial pre-charging time        */
        pmu_init_chgcur = <600000>;         /* set initial charging current limite  */
        pmu_suspend_chgcur = <1000000>;     /* set suspend charging current limite  */
        pmu_resume_chgcur = <600000>;       /* set resume charging current limite   */
        pmu_shutdown_chgcur = <1000000>;    /* set shutdown charging current limite */
        pmu_usbcur_limit = <1>;             /* enable usb current limit?            */
        pmu_usbcur = <500>;                 /* usb limit current value if enabled   */
        pmu_usbvol_limit = <1>;             /* enable usb vbus voltage limit        */
        pmu_usbvol = <4400>;                /* voltage limit value if enabled       */
        pmu_pwroff_vol = <3200>;            /* hardware force power off voltage     */
        pmu_pwron_vol = <2900>;             /* power on when battery voltage above  */
        pmu_pekoff_time = <6000>;           /* long press to power off system       */
        pmu_pekoff_en  = <1>;               /* enable long press to PWR OFF system  */
        pmu_peklong_time = <1500>;          /* threshold to detect long press       */
        pmu_pwrok_time   = <64>;            /* delay to detect pwr ok signal        */
        pmu_pwrnoe_time = <2000>;           /*                                      */
        pmu_intotp_en = <1>;                /* over temperature protection enable   */
        pmu_pekon_time = <128>;             /* powerkey hold time for power on      */
        pmu_charge_efficiency = <84>;       /* efficient of charging                */
        pmu_bat_curve = <
         /* ocv, charge, discharge */
            3132      0       0
            3273      0       0
            3414      0       0
            3555      0       0
            3625      1       3
            3660      2       8
            3696      3      16
            3731     10      24
            3766     15      38
            3801     26      48
            3836     42      56
            3872     52      63
            3942     66      74
            4012     79      85
            4083     90      95
            4153    100     100>;
    };
    pmu {
        #address-cells = <1>;
        #size-cells = <0>;
        compatible = "amlogic, aml_pmu_prober";                 /* fixed for pmu driver, don't change   */
        axp202 { /* PMU for AXP */
            compatible = "axp_mfd";                             /* for driver probe, must have          */
            sub_type = "axp20_mfd";                             /* sub type of pmu family, must have    */
            i2c_bus = "i2c_bus_ao";                             /* attached i2c bus, must have          */
            reg = <0x34>;                                       /* device i2c address, must have        */
            soft_limit_to99 = <0>;                              /* optional                             */
            ddr_voltage   = <1500000>;                          /* default voltage for DDR, optional    */
            vddao_voltage = <1200000>;                          /* default voltage for AO, optional     */
            board_battery = <&battery_parameter>;               /* battery parameter used, must have    */
            status = "okay";                                    /* status of pmu, only one should be OK */
        };
        aml1212{                                                /* PMU for AML1212, see comment above   */
            compatible = "aml_pmu";
            sub_type = "aml1212";
            i2c_bus = "i2c_bus_ao";
            reg = <0x35>;
            soft_limit_to99 = <0>;
            ddr_voltage   = <1500000>;
            vddao_voltage = <1200000>;
            board_battery = <&battery_parameter>;
            status = "disable";
        };
        rn5t618{                                                /* PMU for RN5T618, see comment above   */
            compatible = "ricoh_pmu";
            sub_type = "rn5t618";
            i2c_bus = "i2c_bus_ao";
            reg = <0x32>;
            soft_limit_to99 = <0>;
            ddr_voltage   = <1500000>;
            vddao_voltage = <1200000>;
            board_battery = <&battery_parameter>;
            status = "disable";
        };
    };
		
		
	aml_cams{
		compatible = "amlogic,cams_prober";
		pinctrl-names = "default";
		pinctrl-0 = <&aml_cam_pins> ;
		cam_0{
			cam_name = "gc0308";
			front_back = <0>;
			i2c_bus = "i2c_bus_a";
			gpio_pwdn = "GPIOE_11";
			gpio_rst = "GPIOZ_0";
			mirror_flip = <1>;
			vertical_flip = <0>;
		};
		cam_1{
			cam_name = "gt2005";
			front_back = <1>;
			i2c_bus = "i2c_bus_a";
			gpio_pwdn = "GPIOE_10";
			gpio_rst = "GPIOZ_0";
			mirror_flip = <0>;
			vertical_flip = <0>;
		};
		cam_2{
			cam_name = "gc0328";
			front_back = <0>;
			i2c_bus = "i2c_bus_a";
			gpio_pwdn = "GPIOE_11";
			gpio_rst = "GPIOZ_0";
			mirror_flip = <0>;
			vertical_flip = <0>;	
		};
	
	};
	
	i2c@c8100500{ /*I2C-AO*/
		compatible = "amlogic,aml_i2c";
		dev_name = "i2c-AO";
		reg = <0xc8100500 0x1d>;
		#address-cells = <1>;
		#size-cells = <0>;
		device_id = <0>;
		pinctrl-names="default";
		pinctrl-0=<&ao_i2c_master>;
	};
	
	i2c@c1108500{ /*I2C-A*/
		compatible = "amlogic,aml_i2c";
		dev_name = "i2c-A";
		reg = <0xc1108500 0x20>;
		device_id = <1>;
		pinctrl-names="default";
		pinctrl-0=<&a_i2c_master>;
		#address-cells = <1>;
		#size-cells = <0>;
	};
	
	i2c@c11087c0{ /*I2C-B*/
		compatible = "amlogic,aml_i2c";
		dev_name = "i2c-B";
		reg = <0xc11087c0 0x20>;
		device_id = <2>;
		pinctrl-names="default";
		pinctrl-0=<&b_i2c_master>;
		#address-cells = <1>;
		#size-cells = <0>;

	};
	
	amhdmitx{
		compatible = "amlogic,amhdmitx";
		dev_name = "amhdmitx";
		phy-size = <3>;
		phy-data = <27  0x16  0x30    /* 480i/p 576i/p */
				 74  0x16  0x40    /* 720p 1080i */
				 148  0x16  0x40   /* 1080p */
				>;
	};
	
	mesonvout{
		compatible = "amlogic,mesonvout";
		dev_name = "mesonvout";
		/*reg = <0 0>;*/
	};
	
	mesonvout2{
		compatible = "amlogic,mesonvout2";
		dev_name = "mesonvout2";
		/*reg = <0 0>;*/
	};
	
	backlight{
		compatible = "amlogic,backlight";
		dev_name = "backlight";
		status = "okay";
		pinctrl-names = "default";
		pinctrl-0 = <&lcd_backlight_pins>;	/** pwm pinmux */
		
		bl_level_default_uboot_kernel=<20 128>;	/** default brightness level for uboot & kernel */
		bl_level_middle_mapping=<102 70>;	/** brightness middle level mapping to a new level*/
		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
		
		/* backlight power ctrl */
		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
		bl_ctrl_method=<0>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
		
		bl_gpio_port_on_off="GPIOD_1","1","0";	/** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
		bl_pwm_port_gpio_used="PWM_D","0";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
		bl_pwm_freq=<400>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
		bl_pwm_duty_max_min=<100 20>;	/** brightness diminig duty_max, duty_min : (unit: %, positive logic, only for pwm control method) */
	};
	
	lcd{
		compatible = "amlogic,lcd";
		dev_name = "lcd";
		status = "okay";
		pinctrl-names = "ttl_6bit_hvsync_de_on","ttl_6bit_hvsync_on","ttl_6bit_de_on","ttl_8bit_hvsync_de_on","ttl_8bit_hvsync_on","ttl_8bit_de_on",
						"ttl_6bit_hvsync_de_off","ttl_8bit_hvsync_de_off";
		pinctrl-0 = <&lcd_ttl_rgb_6bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_on &lcd_ttl_de_pins_on>;
		pinctrl-1 = <&lcd_ttl_rgb_6bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_on &lcd_ttl_de_pins_off>;
		pinctrl-2 = <&lcd_ttl_rgb_6bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_off &lcd_ttl_de_pins_on>;
		pinctrl-3 = <&lcd_ttl_rgb_8bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_on &lcd_ttl_de_pins_on>;
		pinctrl-4 = <&lcd_ttl_rgb_8bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_on &lcd_ttl_de_pins_off>;
		pinctrl-5 = <&lcd_ttl_rgb_8bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_off &lcd_ttl_de_pins_on>;
		pinctrl-6 = <&lcd_ttl_rgb_6bit_pins_off &lcd_ttl_clk_pins_off &lcd_ttl_hvsync_pins_off &lcd_ttl_de_pins_off>;
		pinctrl-7 = <&lcd_ttl_rgb_8bit_pins_off &lcd_ttl_clk_pins_off &lcd_ttl_hvsync_pins_off &lcd_ttl_de_pins_off>;
		
		lcd_model_name ="lcd_LP097X02";	/** lcd model name for uboot driver */
		lcd_model_config = <&lcd_LP097X02>;	/** choose panel model config */
		lcd_bits_user=<6>;	/** user defined lcd bits(6 or 8, decided by hardware design; only valid when lcd_bits_option=1) */
		
		/* below configs are decided by hardware design, you can modify them if needed. */
		ttl_rb_bit_swap=<0 0>;	/** ttl rb_swap, bit_swap : (0=normal, 1=swap) */
		lvds_channel_pn_swap=<0>;	/** lvds channel pn swap(0=normal, 1=swap) */
		
		/* recommend settings, you can modify them if needed. */
		valid_hvsync_de=<0 1>;	/** hvsync_signal_valid, DE_signal_valid : (0=disable signal, 1=enable signal) */
		hsign_hoffset_vsign_voffset=<0 0 0 0>;	/** hsign, hoffset, vsign, voffset :("sign-offset" is a pair. sign: 0=positive, 1=negative) */
		
		dither_user_ctrl=<0 0x600>;	/**  dither_user(0=auto setting, 1=user define), dither_ctrl(user defined dither control, only valid when user_define=1) */
		vadj_brightness_contrast_saturation=<0x0 0x80 0x100>;	/** video adjust brightness, contrast, saturation */
		
		gamma_en_reverse=<1 0>;	/** gamma_en(0=disable gamma table, 1=enable gamma table), gamma_table_revert(0=normal, 1=reverse) */
		gamma_multi_rgb_coeff=<0 100 100 100>;	/** gamma_multi(0=single gamma, RGB are same, 1=multi gamma, RGB are different), gamma_r_coeff(%), gamma_g_coeff(%), gamma_b_coeff(%) */
		/** if gamma_multi=1, there must be 3 gamma tables, named as gamma_table_r, gamma_table_g, gamma_table_b */
		gamma_table=<0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
				32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 
				64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 
				96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 
				128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
				160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 
				192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 
				224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255>;
		
		/* default settings, don't modify them unless there is display problem */
		clock_spread_spectrum=<0>;	/** ss_level(0=disable, 1=0.5%, 2=1%, 3=2%, 4=3%, 5=4%, 6=5%) */
		clock_auto_generation=<1>;	/** clk_auto_generation(0=use customer clock parameters, as clk_pll_div_clk_ctrl defined, 1=auto generate clock parameters by lcd_clock) */
		clk_pll_div_clk_ctrl=<0x10220 0x18803 0x1111>;	/** pll_ctrl, div_ctrl, clk_ctrl : (only valid when clk_auto_generation=0) */
		lvds_vswing=<1>;	/** lvds_vswing_level(default level=1, support level 0,1,2,3,4) */
		lvds_user_repack=<0 0>;	/** lvds_repack_user(0=auto setting, 1=user define), lvds_repack(0=JEIDA mode data mapping, 1=VESA mode data mapping. only valid when lvds_repack_user=1) */
		rgb_base_coeff=<0xf0 0x74a>;	/** rgb_base, rgb_coeff */

		//lcd power ctrl	//support up to 15 steps for each sequence
		power_on_uboot="n","n","n";	/** only for uboot, ahead of lcd_power_on, no need config delay */
		power_on_step_1="cpu","GPIOA_27","1";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_2="pmu","GPIO3","0";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_3="signal","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_4="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_5="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_6="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_7="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_8="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_9="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_10="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_11="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_12="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_13="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_14="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_step_15="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_on_delay=<20 20 20 0 0 0 0 0 0 0 0 0 0 0 0>;	/** power on delay after each step */
		power_off_step_1="signal","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_2="pmu","GPIO3","2";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_3="cpu","GPIOA_27","0";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_4="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_5="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_6="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_7="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_8="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_9="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_10="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_11="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_12="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_13="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_14="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_step_15="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
		power_off_delay=<30 20 100 0 0 0 0 0 0 0 0 0 0 0 0>;	/** power off delay after each step */
		power_off_uboot="n","n","n";	/** only for uboot, at the end of lcd_power_off, no need config delay */
	};

	lcd_CLAP070NJ02:lcd_CLAP070NJ02{	//g33
		model_name="CLAP070NJ02";	/** lcd model name */
		interface="ttl";			/** lcd_interface(mipi, lvds, edp, ttl) */
		active_area=<154 86>;		/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
		lcd_bits_option=<8 1>;		/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */
		
		resolution=<1024 600>;	/** horizontal resolution, vertical resolution */
		period=<1344 635>;		/** horizontal period(htotal), vertical period(vtotal) */
		
		clock_hz_pol=<42700000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
		hsync_width_backporch=<10 150>;	/** hsync_width, hsync_backporch(without hsync_width) */
		vsync_width_backporch=<5 18>;	/** vsync_width, vsync_backporch(without vsync_width) */
		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
	};
	
	lcd_TN070TN92:lcd_TN070TN92{	//800*480
		model_name="TN070TN92";	/** lcd model name */
		interface="ttl";		/** lcd_interface(mipi, lvds, edp, ttl) */
		active_area=<154 86>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
		lcd_bits_option=<8 1>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */
		
		resolution=<800 480>;	/** horizontal resolution, vertical resolution */
		period=<1056 525>;		/** horizontal period(htotal), vertical period(vtotal) */
		
		clock_hz_pol=<33300000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
		hsync_width_backporch=<10 36>;	/** hsync_width, hsync_backporch(without hsync_width) */
		vsync_width_backporch=<5 18>;	/** vsync_width, vsync_backporch(without vsync_width) */
		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
	};
	
	lcd_LP097X02:lcd_LP097X02{	//g24
		model_name="LP097X02";	/** lcd model name */
		interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
		active_area=<197 147>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
		lcd_bits_option=<6 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */
		
		resolution=<1024 768>;	/** horizontal resolution, vertical resolution */
		period=<2084 810>;		/** horizontal period(htotal), vertical period(vtotal) */
		
		clock_hz_pol=<85700000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
		hsync_width_backporch=<10 60>;	/** hsync_width, hsync_backporch(without hsync_width) */
		vsync_width_backporch=<3 27>;	/** vsync_width, vsync_backporch(without vsync_width) */
		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
	};
		
	efuse{
		compatible = "amlogic,efuse";
		dev_name = "efuse";
		plat-pos = <0 454>;
		plat-count = <58>;
		usid-min = <8>; /*reserved*/
		usid-max = <31>; /*reserved*/
	};
	
	card{
		compatible = "amlogic,aml_card";
		dev_name = "aml_sd_mmc.0";
		pinctrl-names="sdhc_b","sdhc_c","sdhc_a";
		pinctrl-0=<&sdhc_b_pins>;
		pinctrl-1=<&sdhc_c_pins>;
		pinctrl-2=<&sdhc_a_pins>;
	};
	sdio{
        compatible = "amlogic,aml_sdio";
        dev_name = "aml_sdio.0";
        reg = <0xc1108c20 0x20>;
        pinctrl-names = "sd_clk_cmd_pins", "sd_all_pins", "emmc_clk_cmd_pins", "emmc_all_pins", "sdio_clk_cmd_pins", "sdio_all_pins"; /*sd:sdio_b, emmc:sdio_c, sdio:sdio_a*/
        // pinctrl-0 = <&sd_pins>;
        // pinctrl-1 = <&emmc_pins>;
        // pinctrl-2 = <&sdio_pins>;
        pinctrl-0 = <&sd_clk_cmd_pins>;
        pinctrl-1 = <&sd_all_pins>;
        pinctrl-2 = <&emmc_clk_cmd_pins>;
        pinctrl-3 = <&emmc_all_pins>;
        pinctrl-4 = <&sdio_clk_cmd_pins>;
        pinctrl-5 = <&sdio_all_pins>;

        sd{
            port = <1>;          /*0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
            pinname = "sd";
            ocr_avail = <0x200000>;          /*VDD voltage 3.3 ~ 3.4 */
            caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED";
            f_min = <300000>;
            f_max = <50000000>;
            f_max_w = <50000000>;
            max_req_size = <0x20000>;          /*128KB*/
            gpio_dat3 = "CARD_3";
            gpio_cd = "CARD_6";
            gpio_power = "CARD_8";
            power_level = <0>;
            irq_in = <5>;
            #irq_in_edge = "GPIO_IRQ_FALLING";
            irq_out = <6>;
            #irq_out_edge = "GPIO_IRQ_RISING";
            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
        };
        	
        emmc{
            port = <2>;          /*0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
            pinname = "emmc";
            ocr_avail = <0x200000>;          /*VDD voltage 3.3 ~ 3.4 */
            caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
            f_min = <300000>;
            f_max = <50000000>;
            f_max_w = <50000000>;
            max_req_size = <0x20000>;          /*128KB*/
            gpio_dat3 = "BOOT_3";
            #gpio_cd = "CARD_6";
            #gpio_power = "CARD_8";
            #power_level = <0>;
            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
        };
        
        sdio{
             port = <0>;          /*0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
             pinname = "sdio";
             ocr_avail = <0x200000>;          /*VDD voltage 3.3 ~ 3.4 */
             caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE";
             f_min = <300000>;
             f_max = <50000000>;
             f_max_w = <50000000>;
             max_req_size = <0x20000>;          /*128KB*/
             card_type = <3>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
    };
    
    // sdhc{
        // compatible = "amlogic,aml_sdhc";
        // dev_name = "aml_sdhc.0";
        // reg = <0xc1108e00 0x30>;
        // pinctrl-names = "sd"; /*sd:sdio_b, emmc:sdio_c, sdio:sdio_a*/
        // pinctrl-0 = <&sdhc_b_pins>;

        // sd{
            // port = <4>;          /*0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
            // pinname = "sd";
            // ocr_avail = <0x200000>;          /*VDD voltage 3.3 ~ 3.4 */
            // caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED";
            // f_min = <300000>;
            // f_max = <50000000>;
            // f_max_w = <50000000>;
            // max_req_size = <0x80000>;          /*512KB*/
            // gpio_cd = "CARD_6";
            // gpio_power = "CARD_8";
            // power_level = <0>;
            // irq_in = <5>;
            // irq_out = <6>;
        // };
     // };
	
	wifi{
		compatible = "amlogic,aml_broadcm_wifi";
		dev_name = "aml_broadcm_wifi";
		interrupt_pin = "GPIOX_11";
		irq_num = <4>;
		irq_trigger_type = "GPIO_IRQ_HIGH";
		power_on_pin = "GPIOC_8";
		clock_32k_pin = "GPIOX_12";
	};
	
	meson-remote{
		compatible = "amlogic,aml_remote";
		dev_name = "meson-remote";
		ao_baseaddr = <0xf3100480>;
		pinctrl-names="default";
		pinctrl-0=<&remote_pins>;
	};
    
    aml_audio_codc{
        compatible = "amlogic,audio_codec";
        codec_rt5631:rt5631{
            codec_name = "rt5631";
            i2c_addr = <0x1A>;
            i2c_bus = "i2c_bus_b";
            capless = <0>;
            status = "okay";
                
        };  
        codec_wm8960:wm8960{
            codec_name = "wm8960";
            i2c_addr = <0x1A>;
            i2c_bus = "i2c_bus_b";
            capless = <1>;
            status = "disabled";
        };
    };
    
    audio_platform{
        compatible = "amlogic,aml-audio";
        dev_name = "aml-audio.0";
    };

    audio_dai{
        compatible = "amlogic,aml-dai";
        dev_name = "aml-dai.0";
    };

    wm8960_sound_card{
        compatible = "sound_card,wm8960";
        aml,sound_card = "AML-WM8960";
        //aml,audio-codec = <&wm8960>;
        aml,codec_dai = "wm8960-hifi";
        aml,audio-routing =
            "Ext Spk","SPK_LP",
            "Ext Spk","SPK_LN",
            "Ext Spk","SPK_RP",
            "Ext Spk","SPK_RN",
            "HP","HP_L",
            "HP","HP_R",
            "MICB","Mic",
            "LINPUT1","MICB",
            "LINPUT2","MICB",
            "RINPUT1","MICB",
            "RINPUT2","MICB";
            
        capless = <1>; 
        dres = <2>; /*WM8960_DRES_600R*/
        dis_hp_det = <0>;
        pinctrl-names = "wm8960_audio";
        pinctrl-0 = <&aml_i2s_pins &config_aml_hp_det_pins>;
        wm8960_gpio = "GPIOA_19";
        hp_det_inv;
        status = "disabled";
        
    };

    rt5631_sound_card{
        compatible = "sound_card,rt5631";
        aml,sound_card = "AML-RT5631";
        //aml,audio-codec = <&rt5631>;
        aml,codec_dai = "rt5631-hifi";
        aml,audio-routing =
            "Ext Spk", "SPOL",
            "Ext Spk","SPOR",
            "HP","HPOL",
            "HP","HPOR",
            "MIC1","MIC Bias1",
            "MIC Bias1","MAIN MIC";
        
        /*dev_name = "aml_sound_card";*/
        /*reg = <0 0>;*/
        capless = <0>;
        spk_watt = <0>;     /*RT5631_SPK_1_0W*/
        spk_output = <2>;   /*RT5631_SPK_RIGHT*/
        mic_input = <0>;    /*RT5631_MIC_DIFFERENTIAL*/
        pinctrl-names = "rt5631_audio";
        pinctrl-0 = <&aml_i2s_pins &config_aml_hp_det_pins>;
        rt5631_gpio = "GPIOA_19";
        hp_det_inv;
        status = "okay";
    };
    touch{
        compatible = "amlogic,aml_touch";
        #address-cells = <1>;
        #size-cells = <0>;
				touch_ft5x06:ft5x06{
					touch_name = "ft5x06";
					i2c_bus = "i2c_bus_a";
					reg = <0x38>;
					ic_type = <0>;
					irq = <0>;
					gpio_interrupt = "GPIOA_16";
					gpio_reset = "GPIOC_3";
					xres = <1024>;
					yres = <768>;
					pol = <0x4>;
					fw_file = "/etc/touch/ft5x06.fw";
				};
				touch_gt81xx:gt81xx{
					touch_name = "gt81xx";
					i2c_bus = "i2c_bus_a";
					reg = <0x55>;
					irq = <0>;
					irq_edge = "GPIO_IRQ_FALLING";
					gpio_interrupt = "GPIOA_16";
					gpio_reset = "GPIOC_3";
					xres = <1024>;
					yres = <768>;
					pol = <0>;
					max_num = <10>;
					config_file = "/etc/touch/goodix.con";
				};
   };
    
	saradc{
		compatible = "amlogic,saradc";
	};

	adc_keypad{
		compatible = "amlogic,adc_keypad";
		key_num = <5>;
		name_len = <20>;
		key_name = "menu","vol-","vol+","back","home";
		key_code = <139 114 115 158 102>;
		key_chan = <4 4 4 4 4>;
		key_val = <9 275 150 392 513>;
		key_tolerance = <40 40 40 40 40>;
	};

	key_input{
		compatible = "amlogic,key_input";
		scan_period = <20>;
		fuzz_time = <60>;
		key_code_list = <116>;
		key_num = <1>;
		config = <0>;
	};
    bt-dev{
        compatible = "amlogic,bt-dev";
        dev_name = "bt-dev";
        gpio_reset = "GPIOC_9";
        gpio_en = "GPIOC_7";
        gpio_wake = "GPIOX_10";
    };
	nand{
		compatible = "amlogic,aml_nand";
		dev_name = "nand";
		reg = <0xc1108600 0x24>;
		pinctrl-names = "nand_rb_mod","nand_norb_mod";
		pinctrl-0 = <&nand_input_state &conf_nand_state &nand_base 
									&nand_ce0 &nand_rb0 
									&nand_rb1 &nand_ce1>;
		pinctrl-1 = <&nand_input_state &conf_nand_state &nand_base 
									&nand_ce0 &nand_ce1 
									&nand_ce2 &nand_ce3>;							
		device_id = <0>;			
		plat-names = "bootloader","nandnormal";
		plat-num = <2>;
		plat-part-0 = <&bootload>;
		plat-part-1 = <&normal>;

		bootload: bootload{
			enable_pad ="ce0";
			busy_pad = "rb0";
			timming_mode = "mode5";
			bch_mode = "bch60_1k";
			t_rea = <20>;
			t_rhoh = <15>;
			chip_num = <1>;
			part_num = <0>;
			rb_detect = <1>;
		};
		normal: normal{
			enable_pad ="ce0","ce1";
			busy_pad = "rb0","rb1";
			timming_mode = "mode5";
			bch_mode = "bch60_1k";
			plane_mode = "twoplane";
			t_rea = <20>;
			t_rhoh = <15>;
			chip_num = <2>;
			part_num = <7>;
			partition = <&nand_partitions>;
			rb_detect = <1>;
		};
				
		nand_partitions:nand_partition{
			logo{
				offset=<0x0 0x4800000>;
				size=<0x0 0x800000>;
			};
			aml_logo{
				offset=<0x0 0x5800000>;
				size=<0x0 0x800000>;
			};
			recovery{
				offset=<0x0 0x6800000>;
				size=<0x0 0x800000>;
			};
			boot{
				offset=<0x0 0x8800000>;
				size=<0x0 0x800000>;
			};
			system{
				offset=<0x0 0xa800000>;
				size=<0x0 0x40000000>;
			};
			cache{
				offset=<0x0 0x4a800000>;
				size=<0x0 0x20000000>;
			};
			userdata{
				offset=<0xffffffff 0xffffffff>;
				size=<0x0 0x0>;
			};
		};
	};	

    sensor{
		compatible = "amlogic,aml_sensor";
        sensor_bma250:bma250{
            dev_name = "bma250";
            status = "okay";
            address = <0x18>;
            i2c_bus = "i2c_bus_b";
        };
    };

	securitykey{
		compatible = "amlogic,aml_keys";
	};

	gpio:gpio{
		compatible = "amlogic,m6-gpio";
		dev_name = "gpio";
		#gpio-cells=<2>;
	};

	pinmux{
		compatible = "amlogic,pinmux-m6";
		dev_name = "pinmux";
		#pinmux-cells=<2>;
		ao_uart_pins:ao_uart{
			amlogic,setmask=<10 0x1800>;
			amlogic,pins="GPIOAO_0", "GPIOAO_1";
		};
		a_uart_pins:a_uart{
			amlogic,setmask=<4 0x3c00>;
			amlogic,pins="GPIOX_13", "GPIOX_14", "GPIOX_15", "GPIOX_16";
		};
		ao_i2c_master:ao_i2c{
			amlogic,setmask=<10 0x60>;
			amlogic,clrmask=<10 0x1800006>;
			amlogic,pins="GPIOAO_4","GPIOAO_5";
		};
		a_i2c_master:a_i2c{
			amlogic,setmask=<5 0xc000000>;
			amlogic,clrmask=<5 0x3000000>;
			amlogic,pins="GPIOX_25","GPIOX_26";
		};
		b_i2c_master:b_i2c{
			amlogic,setmask=<5 0xc0000000>;
			amlogic,clrmask=<5 0x30000000>;
			amlogic,pins="GPIOX_27","GPIOX_28";
		};
		nand_input_state:nand_input{
			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_4",
						"BOOT_5","BOOT_6","BOOT_7","BOOT_12","BOOT_13",
						"BOOT_8","BOOT_9","BOOT_10","BOOT_11",
						"BOOT_14","BOOT_15","BOOT_16";
			amlogic,enable-output=<1>;
		};
		conf_nand_state: conf_nand{
			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_4",
						"BOOT_5","BOOT_6","BOOT_7","BOOT_16";
			amlogic,pullup=<1>;
		};
		nand_base: nand{
			amlogic,setmask=<2 0xc3c0000>;
			amlogic,clrmask=<	5 0xe
							3 0x80000000
							6 0x3c000000
							4 0x70000000>;
			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_4",
						"BOOT_5","BOOT_6","BOOT_7","BOOT_12","BOOT_13",
						"BOOT_14","BOOT_15","BOOT_16";
		};
		nand_ce0: nand_ce0{
			amlogic,setmask=<2 0x2000000>;
			amlogic,pins = "BOOT_8";
		};
		nand_ce1: nand_ce1{
			amlogic,setmask=<2 0x1000000>;
			amlogic,pins = "BOOT_9";
		};
		nand_ce2: nand_ce2{
			amlogic,setmask=<2 0x800000>;
			amlogic,pins = "BOOT_10";
		};
		nand_ce3: nand_ce3{
			amlogic,setmask=<2 0x400000>;
			amlogic,pins = "BOOT_11";
		};
		nand_rb0: nand_rb0{
			amlogic,setmask=<2 0x20000>;
			amlogic,clrmask=<2 0x800000>;
			amlogic,pins = "BOOT_10";
		};
		nand_rb1: nand_rb1{
			amlogic,setmask=<2 0x10000>;
			amlogic,clrmask=<2 0x400000>;
			amlogic,pins = "BOOT_11";
		};

		sdhc_b_pins:sdhc_b_pin{
			amlogic,setmask=<2 0xfc00>;
			amlogic,clrmask=<2 0xf0>;
			amlogic,pins="CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
		};
		sdhc_c_pins:sdhc_c_pin{
			amlogic,setmask=<6 0x3f000000>;
			amlogic,clrmask=<4 0x6c000000 2 0x4c30000 3 0x80000000>;
			amlogic,pins="BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_10","BOOT_11";
		};
		sdhc_a_pins:sdhc_a_pin{
			amlogic,setmask=<8 0x3f>;
			amlogic,clrmask=<5 0x6c00 >;
			amlogic,pins="GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
		};
        
        // sdhc_a_pins:sdhc_a_pin{
            // amlogic,setmask=<5 0x00006c00>; /*0x00007c00 adds "GPIOX_4","GPIOX_5","GPIOX_6","GPIOX_7"; At the same time we should clrmask reg3_bit[27-30]*/
            // amlogic,clrmask=<2 0x000000f0           /*sdhc b*/
                                // 4 0x7c000000        /*sdhc c*/
                                // 8 0x0000003f>;      /*sdio a, because it uses the same pins with sdhc a*/
            // amlogic,pins="GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
        // };
        // sdhc_b_pins:sdhc_b_pin{
            // amlogic,setmask=<2 0x000000f0>;         /*sdhc b*/
            // amlogic,clrmask=<5 0x00007c00           /*sdhc a*/
                                // 4 0x7c000000        /*sdhc c*/
                                // 2 0x0000fc00>;      /*sdio b*/
            // amlogic,pins="CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
        // };
        // sdhc_c_pins:sdhc_c_pin{
            // amlogic,setmask=<4 0x6c000000>; /*0x7c000000 adds "BOOT_4","BOOT_5","BOOT_6","BOOT_7"; At the same time we should clrmask reg2_bit[24-25]*/
            // amlogic,clrmask=<2 0x04c300f0           /*sdhc b & nand*/
                                // 5 0x00007c00        /*sdhc a*/
                                // 6 0x3f000000        /*sdio c*/
                                // 3 0x80000000>;      /*I2C*/
            // amlogic,pins="BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_10","BOOT_11";
        // };
        sdio_all_pins:sdio_all_pins{
            amlogic,setmask=<8 0x0000003f>;         /*sdio a*/
            amlogic,clrmask=<6 0x3f000000           /*sdio c*/
                                2 0x0000fc00        /*sdio b*/
                                5 0x00006c00>;      /*sdhc a*/
            amlogic,pins = "GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
            amlogic,enable-output=<1>; /* 0:output, 1:input */
            amlogic,pullup=<0>;
        };
        sdio_clk_cmd_pins:sdio_clk_cmd_pins{
            amlogic,setmask=<8 0x00000003>;         /*sdio a*/
            amlogic,clrmask=<6 0x3f000000           /*sdio c*/
                                2 0x0000fc00        /*sdio b*/
                                5 0x00006c00>;      /*sdhc a*/
            amlogic,pins = "GPIOX_8","GPIOX_9";
            amlogic,enable-output=<1>; /* 0:output, 1:input */
            amlogic,pullup=<0>;
        };
        sd_all_pins:sd_all_pins{
            amlogic,setmask=<2 0x0000fc00>;         /*sdio b*/
            amlogic,clrmask=<6 0x3f000000           /*sdio c*/
                                8 0x0000003f        /*sdio a*/
                                2 0x000000f0>;      /*sdhc b*/
            amlogic,pins = "CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
            amlogic,enable-output=<1>; /* 0:output, 1:input */
            amlogic,pullup=<0>;
        };
        sd_clk_cmd_pins:sd_clk_cmd_pins{
            amlogic,setmask=<2 0x00000c00>;         /*sdio b*/
            amlogic,clrmask=<6 0x3f000000           /*sdio c*/
                                8 0x0000003f        /*sdio a*/
                                2 0x000000f0>;      /*sdhc b*/
            amlogic,pins = "CARD_4","CARD_5"; /* CARD_4:CLK, CARD_5:CMD */
            amlogic,enable-output=<1>; /* 0:output, 1:input */
            amlogic,pullup=<0>;
        };
        emmc_all_pins:emmc_all_pins{
            amlogic,setmask=<6 0x3f000000>;         /*sdio c, */
            amlogic,clrmask=<2 0x04c3fc00           /*sdio b & nand*/
                                8 0x0000003f        /*sdio a*/
                                4 0x6c000000        /*sdhc c*/
                                3 0x80000000>;      /*I2C*/
            amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_10","BOOT_11";
            amlogic,enable-output=<1>; /* 0:output, 1:input */
            amlogic,pullup=<0>;
        };
        emmc_clk_cmd_pins:emmc_clk_cmd_pins{
            amlogic,setmask=<6 0x03000000>;         /*bit[24-25] */
            amlogic,clrmask=<2 0x04c3fc00           /*sdio b & nand*/
                                8 0x0000003f        /*sdio a*/
                                4 0x6c000000        /*sdhc c*/
                                3 0x80000000>;      /*I2C*/
            amlogic,pins = "BOOT_10","BOOT_11";
            amlogic,enable-output=<1>; /* 0:output, 1:input */
            amlogic,pullup=<0>;
        };
        
		remote_pins:remote_pin{
			amlogic,setmask=<10 0x1>;
			amlogic,pins="GPIOAO_7";
		};
		aml_i2s_pins: aml_i2s_pins{
			amlogic,setmask=<9 0xAB0>;
			amlogic,clrmask=<9 0x440>;
			amlogic,pins = "GPIOE_0","GPIOE_1","GPIOE_2","GPIOE_3";
		};
		config_aml_hp_det_pins: config_aml_hp_det_pins{
			amlogic,pins = "GPIOA_19";
			amlogic,pullup=<1>;
		};
		aml_dummy_codec_pins: aml_dummy_codec_pins{
			amlogic,setmask=<9 0x2B0
							3 0x1000000>;
			amlogic,clrmask=<9 0x380c4e>;
			amlogic,pins = "GPIOE_1","GPIOE_2","GPIOE_3","GPIOE_4","GPIOC_9";
		};
		lcd_backlight_pins:lcd_backlight{
			amlogic,setmask=<2 0x8>;
			amlogic,clrmask=<1 0x10000000>;
			amlogic,pins = "GPIOD_1";
		};
		lcd_ttl_hvsync_pins_on:lcd_ttl_hvsync_on{
			amlogic,setmask=<1 0xc0000>;
			amlogic,clrmask=<0 0xc00000>;
			amlogic,pins = "GPIOD_2","GPIOD_3";
		};
		lcd_ttl_hvsync_pins_off:lcd_ttl_hvsync_off{
			amlogic,clrmask=<0 0xc00000 1 0xc0000>;
			amlogic,pins = "GPIOD_2","GPIOD_3";
			amlogic,enable-output=<1>;
		};
		lcd_ttl_de_pins_on:lcd_ttl_de_on{
			amlogic,setmask=<1 0x20000>;
			amlogic,clrmask=<0 0x1000000>;
			amlogic,pins = "GPIOD_4";
		};
		lcd_ttl_de_pins_off:lcd_ttl_de_off{
			amlogic,clrmask=<0 0x1000000 1 0x20000>;
			amlogic,pins = "GPIOD_4";
			amlogic,enable-output=<1>;
		};
		lcd_ttl_clk_pins_on:lcd_ttl_clk_on{
			amlogic,setmask=<1 0x4000>;
			amlogic,clrmask=<0 0x8000000  1 0x3800>;
			amlogic,pins = "GPIOD_7";
		};
		lcd_ttl_clk_pins_off:lcd_ttl_clk_off{
			amlogic,clrmask=<0 0x8000000  1 0x7800>;
			amlogic,pins = "GPIOD_7";
			amlogic,enable-output=<1>;
		};
		lcd_ttl_rgb_8bit_pins_on:lcd_ttl_rgb_8bit_on{
			amlogic,setmask=<0 0x3f>;
			amlogic,clrmask=<5 0xff8000>;
			amlogic,pins = "GPIOB_0","GPIOB_1","GPIOB_2","GPIOB_3","GPIOB_4","GPIOB_5","GPIOB_6","GPIOB_7",		//R0~R7
						"GPIOB_8","GPIOB_9","GPIOB_10","GPIOB_11","GPIOB_12","GPIOB_13","GPIOB_14","GPIOB_15",	//G0~G7
						"GPIOB_16","GPIOB_17","GPIOB_18","GPIOB_19","GPIOB_20","GPIOB_21","GPIOB_22","GPIOB_23";//B0~B7
		};
		lcd_ttl_rgb_8bit_pins_off:lcd_ttl_rgb_8bit_off{
			amlogic,clrmask=<0 0x3f 5 0xff8000>;
			amlogic,pins = "GPIOB_0","GPIOB_1","GPIOB_2","GPIOB_3","GPIOB_4","GPIOB_5","GPIOB_6","GPIOB_7",		//R0~R7
						"GPIOB_8","GPIOB_9","GPIOB_10","GPIOB_11","GPIOB_12","GPIOB_13","GPIOB_14","GPIOB_15",	//G0~G7
						"GPIOB_16","GPIOB_17","GPIOB_18","GPIOB_19","GPIOB_20","GPIOB_21","GPIOB_22","GPIOB_23";//B0~B7
			amlogic,enable-output=<1>;
		};
		lcd_ttl_rgb_6bit_pins_on:lcd_ttl_rgb_6bit_on{
			amlogic,setmask=<0 0x15>;
			amlogic,clrmask=<5 0xf98000>;
			amlogic,pins = "GPIOB_2","GPIOB_3","GPIOB_4","GPIOB_5","GPIOB_6","GPIOB_7",		//R2~R7
						"GPIOB_10","GPIOB_11","GPIOB_12","GPIOB_13","GPIOB_14","GPIOB_15",	//G2~G7
						"GPIOB_18","GPIOB_19","GPIOB_20","GPIOB_21","GPIOB_22","GPIOB_23";	//B2~B7
		};
		lcd_ttl_rgb_6bit_pins_off:lcd_ttl_rgb_6bit_off{
			amlogic,clrmask=<0 0x15 5 0xf98000>;
			amlogic,pins = "GPIOB_2","GPIOB_3","GPIOB_4","GPIOB_5","GPIOB_6","GPIOB_7",		//R2~R7
						"GPIOB_10","GPIOB_11","GPIOB_12","GPIOB_13","GPIOB_14","GPIOB_15",	//G2~G7
						"GPIOB_18","GPIOB_19","GPIOB_20","GPIOB_21","GPIOB_22","GPIOB_23";	//B2~B7
			amlogic,enable-output=<1>;
		};
		aml_cam_pins: aml_cam_pins{
			amlogic,setmask=<9 0x1000>;
			amlogic,pins = "GPIOZ_12";
		};
		aml_spi_nor_pins: aml_spi_nor_pins{
			amlogic,setmask=<5 0xf>;
			amlogic,clrmask=<2 0x380000>;
			amlogic,pins = "BOOT_12","BOOT_13","BOOT_14","BOOT_17";
		};
	};
	unifykey{
		compatible = "amlogic,unifykey";
		
		/*efuse-version = <2>;*/ /*m6 efuse version 2,m3 efuse version 1, not config efuse version in default*/
		unifykey-num = <3>;
		unifykey-index-0 = <&keysn_0>;
		unifykey-index-1 = <&keysn_1>;
		unifykey-index-2 = <&keysn_2>;

		keysn_0: key_0{
			key-name = "key0";
			key-device = "nandkey";
			key-dataformat = "hexdata";
			key-permit = "read","write","del";
		};
		keysn_1:key_1{
			key-name = "key1";
			key-device = "nandkey";
			key-dataformat = "hexdata";
			key-permit = "read","write","del";
		};
		keysn_2:key_2{
			key-name = "key2";
			key-device = "nandkey";
			key-dataformat = "hexdata";
			key-permit = "read","write","del";
		};
	};

}; /* end of / */

