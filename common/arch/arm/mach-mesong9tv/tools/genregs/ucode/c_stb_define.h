// ----------------------------------------------------------------------
// This file is automatically generated from the script:
// 
// ./create_stb_define_for_C_code.pl
// 
// and was applied to the file
// 
// ./stb_define.h
// 
// DO NOT EDIT!!!!!
// ----------------------------------------------------------------------
// 
#ifdef C_STB_DEFINE_H
#else
#define C_STB_DEFINE_H

// synopsys translate_off
// synopsys translate_on
// There are two instantiations under one CBUS slave.  Each CBUS slave can support
// 256 registers.  Each demux is allocated 128 registers so set the offset in
// the middle
// Copy this define but don't add a base address
// process_header_copy_only_on 
// process_header_copy_only_off 
//========================================================================
//  STB TOP Registers				    (8'hf0 - 8'hf7)
//========================================================================
// bit 25 -- use FAIL fro TS2
// bit 24 -- use FAIL fro TS1
// bit 23 -- use FAIL fro TS0
// bit 22 -- invert fec_error for S2P1
// bit 21 -- invert fec_data for S2P1
// bit 20 -- invert fec_sync for S2P1
// bit 19 -- invert fec_valid for S2P1
// bit 18 -- invert fec_clk for S2P1
// bit 17:16 -- fec_s_sel for S2P1  00 - select TS0, 01 -- select TS1, 10 -- select TS2, 11 - reserved
// Bit 15 -- enable_des_pl_clk
// Bit 14:13 -- reserved
// Bit 12:10 -- ts_out_select, 0-TS0, 1-TS1, 2-TS2, 3,4-Reserved, 5-S2P1, 6-S2P0, 7-File
// bit 9:8 -- des_i_sel 00 -- select_fec_0, 01 -- select_fec_1, 10 -- select_fec_2, 11 - reserved
// bit 7 -- enable_des_pl
// bit 6 -- invert fec_error for S2P0
// bit 5 -- invert fec_data for S2P0
// bit 4 -- invert fec_sync for S2P0
// bit 3 -- invert fec_valid for S2P0
// bit 2 -- invert fec_clk for S2P0
// bit 1:0 -- fec_s_sel for S2P0  00 - select TS0, 01 -- select TS1, 10 -- select TS2, 11 - reserved
// 15:8 -- TS_package_length_sub_1 (default : 187)
//  7:0 -- fec_sync_byte (default : 0x47)
// Bit 23:16 -- file_m2ts_skip_bytes
// Bit 15:8 -- des_out_dly
// Bit 7:6 -- transport_scrambling_control_odd // should be 3
// Bit 5 -- ts_hiu_enable
// Bit 4:0 -- fec_clk_div
// Bit 13:8 -- des ts pl state   -- Read Only
// Bit 3:0 PID index to 8 PID to get key-set
// auto increse after TS_PL_PID_DATA read/write
// Bit 13 -- PID match disble
// Bit 12:0 -- PID
// process_header_no_copy_on   
//
// NOTE:  Don't process the demux registers using the standard create_headers.... perl script.
//        Instead, since the demux has multiple instances (and many registers) use a separate
//        script to create a separate stb_define.h for C-code.  
//========================================================================
//  STB Registers				    (8'h00 - 8'h4f)
//
//========================================================================
// STB registers are 8'h0x
// Bit 15:0 -- version number : 0x0002  (v0.01)
#define STB_VERSION                                0x1600
#define STB_VERSION_2                              0x1650
#define STB_VERSION_3                              0x16a0
#define STB_TEST_REG                               0x1601
#define STB_TEST_REG_2                             0x1651
#define STB_TEST_REG_3                             0x16a1
// Bit 15 -- fec_core_select 1 - select descramble output
// Bit 14:12 -  fec_select 0-TS0, 1-TS1, 2-TS2, 3,4-Reserved, 5-S2P1, 6-S2P0, 7-File 
// Bit 11 -- FEC_CLK
// Bit 10 -- SOP
// Bit 9 -- D_VALID
// Bit 8 -- D_FAIL
// Bit 7:0 -- D_DATA 7:0
#define FEC_INPUT_CONTROL                          0x1602
#define FEC_INPUT_CONTROL_2                        0x1652
#define FEC_INPUT_CONTROL_3                        0x16a2
#define FEC_INPUT_DATA                             0x1603
#define FEC_INPUT_DATA_2                           0x1653
#define FEC_INPUT_DATA_3                           0x16a3
// bit 31 -- enable_free_clk_fec_data_valid
// bit 30 -- enable_free_clk_stb_reg
// bit 29:22 -- reserved
// bit 21 -- do_not_trust_pes_package_length
// bit 20 (bit 4) -- Bypass use recoder path
// bit 19 (bit 3) -- clear_PID_continuity_counter_valid
// bit 18 (bit 2) -- Disable Splicing
// bit 17 (bit 1) -- Insert PES_STRONG_SYNC in Audio PES
// bit 16 (bit 0) -- Insert PES_STRONG_SYNC in Video PES
// Bit 15 - do not trust section length
// Bit 14 - om cmd push even zero
// Bit 13 - reserved
// Bit 12 - SUB, OTHER PES interrupt at beginning of PES
// Bit 11 - discard_av_package -- for ts_recorder use only 
// Bit 10 - ts_recorder_select  0:after PID filter 1:before PID filter
// Bit 9 - ts_recorder_enable
// Bit 8 - (table_id == 0xff) means section_end
// Bit 7 - do not send uncomplete section
// Bit 6 - do not discard duplicate package
// Bit 5 - search SOP when trasport_error_indicator
// Bit 4 - stb demux enable
// Bit 3 - do not reset state machine on SOP
// Bit 2 - search SOP when error happened ( when ignore_fail_n_sop, will have this case)
// Bit 1 - do not use SOP input ( check FEC sync byte instead )
// Bit 0 - ignore fec_error bit when non sop ( check error on SOP only)
#define DEMUX_CONTROL                              0x1604
#define DEMUX_CONTROL_2                            0x1654
#define DEMUX_CONTROL_3                            0x16a4
// bit 15:8 demux package length - 1 ( default : 187 )
// bit 7:0 default is 0x47
#define FEC_SYNC_BYTE                              0x1605
#define FEC_SYNC_BYTE_2                            0x1655
#define FEC_SYNC_BYTE_3                            0x16a5
// bit 31:16 -- filter memory write data hi[31:16]
// bit 15:0 -- filter memory write data low [15:0]
#define FM_WR_DATA                                 0x1606
#define FM_WR_DATA_2                               0x1656
#define FM_WR_DATA_3                               0x16a6
// bit 31:24 -- advanced setting hi
// bit 23:16 -- advanced setting low
// bit 15 -- filter memory write data request
// bit 7:0 -- filter memory write addr
#define FM_WR_ADDR                                 0x1607
#define FM_WR_ADDR_2                               0x1657
#define FM_WR_ADDR_3                               0x16a7
// bit 13:8 demux state  -- read only
// bit 7:4 -- maxnum section filter compare address
// bit 3:0 -- maxnum PID filter compare address
#define MAX_FM_COMP_ADDR                           0x1608
#define MAX_FM_COMP_ADDR_2                         0x1658
#define MAX_FM_COMP_ADDR_3                         0x16a8
// bit 15 - transport_error_indicator
// bit 14 - payload_unit_start_indicator
// bit 13 - transport_priority
// bit 12:0 - PID
#define TS_HEAD_0                                  0x1609
#define TS_HEAD_0_2                                0x1659
#define TS_HEAD_0_3                                0x16a9
// bit 7:6 transport_scrambling_control
// bit 5:4 adaptation_field_control
// bit 3:0 continuity_counter
#define TS_HEAD_1                                  0x160a
#define TS_HEAD_1_2                                0x165a
#define TS_HEAD_1_3                                0x16aa
// bit 15:12 -- om_cmd_count (read only)
// bit  11:9 -- overflow_count // bit  11:9 -- om_cmd_wr_ptr (read only)
// bit   8:6 -- om_overwrite_count // bit   8:6 -- om_cmd_rd_ptr (read only)
// bit   5:3 -- type_stb_om_w_rd (read only)
// bit     2 -- unit_start_stb_om_w_rd (read only)
// bit     1 -- om_cmd_overflow (read only)
// bit     0 -- om_cmd_pending (read) 
// bit     0 -- om_cmd_read_finished (write)
#define OM_CMD_STATUS                              0x160b
#define OM_CMD_STATUS_2                            0x165b
#define OM_CMD_STATUS_3                            0x16ab
// bit 15:9 // bit 14:8 -- count_stb_om_w_rd  (read only)
// bit 8:0  // bit  7:0 -- start_stb_om_wa_rd (read only)
#define OM_CMD_DATA                                0x160c
#define OM_CMD_DATA_2                              0x165c
#define OM_CMD_DATA_3                              0x16ac
// bit 11:0 -- offset for section data
#define OM_CMD_DATA2                               0x160d
#define OM_CMD_DATA2_2                             0x165d
#define OM_CMD_DATA2_3                             0x16ad
// bit 31:16 -- base address for section buffer group 0 (*0x400 to get real address)
// bit 15:0 -- base address for section buffer group 1 (*0x400 to get real address)
#define SEC_BUFF_01_START                          0x160e
#define SEC_BUFF_01_START_2                        0x165e
#define SEC_BUFF_01_START_3                        0x16ae
// bit 31:16 -- ba2e address for section buffer group 2 (*0x400 to get real address)
// bit 15:0 -- base address for section buffer group 3 (*0x400 to get real address)
#define SEC_BUFF_23_START                          0x160f
#define SEC_BUFF_23_START_2                        0x165f
#define SEC_BUFF_23_START_3                        0x16af
// bit 3:0 -- section buffer size for group 0 (bit used,  for example, 10 means 1K)
// bit 7:4 -- section buffer size for group 1
// bit 11:8 -- section buffer size for group 2
// bit 15:12 -- section buffer size for group 3
#define SEC_BUFF_SIZE                              0x1610
#define SEC_BUFF_SIZE_2                            0x1660
#define SEC_BUFF_SIZE_3                            0x16b0
// section buffer busy status for buff 31:0 ( Read Only )
#define SEC_BUFF_BUSY                              0x1611
#define SEC_BUFF_BUSY_2                            0x1661
#define SEC_BUFF_BUSY_3                            0x16b1
// section buffer write status for buff 31:0 -- Read
// clear buffer status ( buff READY and BUSY ) -- write
#define SEC_BUFF_READY                             0x1612
#define SEC_BUFF_READY_2                           0x1662
#define SEC_BUFF_READY_3                           0x16b2
// bit 4:0 -- SEC_BUFFER_INDEX   RW
// bit 12:8 -- SEC_BUFFER_NUMBER for the INDEX buffer  Read_Only
// bit 14 -- output_section_buffer_valid
// bit 15 -- section_reset_busy (Read Only)
#define SEC_BUFF_NUMBER                            0x1613
#define SEC_BUFF_NUMBER_2                          0x1663
#define SEC_BUFF_NUMBER_3                          0x16b3
// bit 9:5 -- BYPASS PID number
// bit 4:0 -- PCR PID number
#define ASSIGN_PID_NUMBER                          0x1614
#define ASSIGN_PID_NUMBER_2                        0x1664
#define ASSIGN_PID_NUMBER_3                        0x16b4
// bit 15:0 -- stream_id filter bit enable
// bit 7:0 -- stream_id filter target
#define VIDEO_STREAM_ID                            0x1615
#define VIDEO_STREAM_ID_2                          0x1665
#define VIDEO_STREAM_ID_3                          0x16b5
#define AUDIO_STREAM_ID                            0x1616
#define AUDIO_STREAM_ID_2                          0x1666
#define AUDIO_STREAM_ID_3                          0x16b6
#define SUB_STREAM_ID                              0x1617
#define SUB_STREAM_ID_2                            0x1667
#define SUB_STREAM_ID_3                            0x16b7
#define OTHER_STREAM_ID                            0x1618
#define OTHER_STREAM_ID_2                          0x1668
#define OTHER_STREAM_ID_3                          0x16b8
// bit 12 -- PCR_EN
// bit 11:0 -- PCR90K_DIV
#define PCR90K_CTL                                 0x1619
#define PCR90K_CTL_2                               0x1669
#define PCR90K_CTL_3                               0x16b9
// bit 15:0 -- PCR[31:0] R/W
#define PCR_DEMUX                                  0x161a
#define PCR_DEMUX_2                                0x166a
#define PCR_DEMUX_3                                0x16ba
// bit 15:0 -- VPTS[31:0] R/W
#define VIDEO_PTS_DEMUX                            0x161b
#define VIDEO_PTS_DEMUX_2                          0x166b
#define VIDEO_PTS_DEMUX_3                          0x16bb
// bit 15:0 -- VDTS[31:0] R/W
#define VIDEO_DTS_DEMUX                            0x161c
#define VIDEO_DTS_DEMUX_2                          0x166c
#define VIDEO_DTS_DEMUX_3                          0x16bc
// bit 15:0 -- APTS[31:0] R/W
#define AUDIO_PTS_DEMUX                            0x161d
#define AUDIO_PTS_DEMUX_2                          0x166d
#define AUDIO_PTS_DEMUX_3                          0x16bd
// bit 15:0 -- SPTS[31:0] R/W
#define SUB_PTS_DEMUX                              0x161e
#define SUB_PTS_DEMUX_2                            0x166e
#define SUB_PTS_DEMUX_3                            0x16be
// read -- status, write 1 clear status
// bit 15 -- SUB_PTS[32]
// bit 14 -- AUDIO_PTS[32]
// bit 13 -- VIDEO_DTS[32]
// bit 12 -- VIDEO_PTS[32]
// bit 3 -- sub_pts_ready
// bit 2 -- audio_pts_ready
// bit 1 -- video_dts_ready
// bit 0 -- video_pts_ready
#define STB_PTS_DTS_STATUS                         0x161f
#define STB_PTS_DTS_STATUS_2                       0x166f
#define STB_PTS_DTS_STATUS_3                       0x16bf
// bit 3:0 --
//  0 -- adaptation_field_length[7:0], adaption_field_byte_1[7:0] 
//  1 -- stream_id[7:0], pes_header_bytes_left[7:0]
//  2 -- pes_package_bytes_left[15:0]
//  3 -- pes_ctr_byte[7:0], pes_flag_byte[7:0]
// 
#define STB_DEBUG_INDEX                            0x1620
#define STB_DEBUG_INDEX_2                          0x1670
#define STB_DEBUG_INDEX_3                          0x16c0
// read only
#define STB_DEBUG_DATAUT_O                         0x1621
#define STB_DEBUG_DATAUT_O_2                       0x1671
#define STB_DEBUG_DATAUT_O_3                       0x16c1
// default : 0x807f
// bit 15:9  -- MAX OM DMA COUNT  (default: 0x40) 
// bit 8:0   -- LAST ADDR OF OM ADDR (default: 127)
#define STBM_CTL_O                                 0x1622
#define STBM_CTL_O_2                               0x1672
#define STBM_CTL_O_3                               0x16c2
// 15:0  WRITE 1 CLEAR to clear interrupt source
// 9 -- splicing_point
// 8 -- other_PES_int
// 7 -- sub_PES_int 
// 6 -- discontinuity
// 5 -- duplicated_pack_found
// 4 -- New PDTS ready
// 3 -- om_cmd_buffer ready for access
// 2 -- section buffer ready 
// 1 -- transport_error_indicator
// 0 -- TS ERROR PIN 
#define STB_INT_STATUS                             0x1623
#define STB_INT_STATUS_2                           0x1673
#define STB_INT_STATUS_3                           0x16c3
// Bit 5:3 - demux om write endian control for bypass
// Bit 2:0 - demux om write endian control for section
// When Bit 31 - 1 write will indicate all type use sepertate endian (Write Only)
// Bit 23:21 - demux om write endian control for OTHER_PES_PACKET
// Bit 20:18 - demux om write endian control for SCR_ONLY_PACKET
// Bit 17:15 - demux om write endian control for SUB_PACKET
// Bit 14:12 - demux om write endian control for AUDIO_PACKET
// Bit 11:9  - demux om write endian control for VIDEO_PACKET
// 
// When Bit 31 - 0 write will indicate all type else use Bit 8:6
// Bit 8:6 - demux om write endian control for else
#define DEMUX_ENDIAN                               0x1624
#define DEMUX_ENDIAN_2                             0x1674
#define DEMUX_ENDIAN_3                             0x16c4
// Bit 15:8 -- last_burst_threshold
// Bit 7 -- use hi_bsf interface
// Bit 6:2 - fec_clk_div
// Bit 1 ts_source_sel 
// Bit 0 - Hiu TS generate enable 
#define TS_HIU_CTL                                 0x1625
#define TS_HIU_CTL_2                               0x1675
#define TS_HIU_CTL_3                               0x16c5
// bit 15:0 -- base address for section buffer start (*0x10000 to get real base)
#define SEC_BUFF_BASE                              0x1626
#define SEC_BUFF_BASE_2                            0x1676
#define SEC_BUFF_BASE_3                            0x16c6
// bit 11 -- mask bit for OTHER_PES_AHB_DMA_EN
// bit 10 -- mask bit for SUB_AHB_DMA_EN
// bit 9 -- mask bit for BYPASS_AHB_DMA_EN
// bit 8 -- mask bit for SECTION_AHB_DMA_EN
// bit 7 -- mask bit for recoder stream
// bit 6:0 -- mask bit for each type
#define DEMUX_MEM_REQ_EN                           0x1627
#define DEMUX_MEM_REQ_EN_2                         0x1677
#define DEMUX_MEM_REQ_EN_3                         0x16c7
// bit 31:0 -- vb_wr_ptr for video PDTS 
#define VIDEO_PDTS_WR_PTR                          0x1628
#define VIDEO_PDTS_WR_PTR_2                        0x1678
#define VIDEO_PDTS_WR_PTR_3                        0x16c8
// bit 31:0 -- ab_wr_ptr for audio PDTS
#define AUDIO_PDTS_WR_PTR                          0x1629
#define AUDIO_PDTS_WR_PTR_2                        0x1679
#define AUDIO_PDTS_WR_PTR_3                        0x16c9
// bit 20:0 -- SB_WRITE_PTR (sb_wr_ptr << 3 == byte write position)
#define SUB_WR_PTR                                 0x162a
#define SUB_WR_PTR_2                               0x167a
#define SUB_WR_PTR_3                               0x16ca
// bit 19:0 -- SB_START (sb_start << 12 == byte address);  
#define SB_START                                   0x162b
#define SB_START_2                                 0x167b
#define SB_START_3                                 0x16cb
// bit 20:0 -- SB_SIZE (sb_size << 3 == byte size, 16M maximun) 
#define SB_LAST_ADDR                               0x162c
#define SB_LAST_ADDR_2                             0x167c
#define SB_LAST_ADDR_3                             0x16cc
// bit 31:0 -- sb_wr_ptr for sub PES
#define SB_PES_WR_PTR                              0x162d
#define SB_PES_WR_PTR_2                            0x167d
#define SB_PES_WR_PTR_3                            0x16cd
// bit 31:16 -- ob_wr_ptr for other PES
// bit 20:0 -- OB_WRITE_PTR (ob_wr_ptr << 3 == byte write position)
#define OTHER_WR_PTR                               0x162e
#define OTHER_WR_PTR_2                             0x167e
#define OTHER_WR_PTR_3                             0x16ce
// bit 19:0 -- OB_START (ob_start << 12 == byte address);  
#define OB_START                                   0x162f
#define OB_START_2                                 0x167f
#define OB_START_3                                 0x16cf
// bit 20:0 -- OB_SIZE (ob_size << 3 == byte size, 16M maximun) 
#define OB_LAST_ADDR                               0x1630
#define OB_LAST_ADDR_2                             0x1680
#define OB_LAST_ADDR_3                             0x16d0
// bit 31:0 -- ob_wr_ptr for sub PES
#define OB_PES_WR_PTR                              0x1631
#define OB_PES_WR_PTR_2                            0x1681
#define OB_PES_WR_PTR_3                            0x16d1
// 15:0  DEMUX interrupt MASK
// 9 -- splicing_point
// 8 -- other_PES_int
// 7 -- sub_PES_int 
// 6 -- discontinuity
// 5 -- duplicated_pack_found
// 4 -- New PDTS ready
// 3 -- om_cmd_buffer ready for access
// 2 -- section buffer ready 
// 1 -- transport_error_indicator
// 0 -- TS ERROR PIN 
#define STB_INT_MASK                               0x1632
#define STB_INT_MASK_2                             0x1682
#define STB_INT_MASK_3                             0x16d2
// 31:16 VIDEO PID filter data
//15 -- splicing VIDEO PID change enable 
//14:10 -- VIDEO PID FILTER ADDRESS
// 9 -- PES splicing active (Read Only) 
// 8 -- splicing active (Read Only)
// 7:0  splicing countdown (Read Only)
#define VIDEO_SPLICING_CTL                         0x1633
#define VIDEO_SPLICING_CTL_2                       0x1683
#define VIDEO_SPLICING_CTL_3                       0x16d3
// 31:16 AUDIO PID filter data
//15 -- splicing AUDIO PID change enable 
//14:10 -- AUDIO PID FILTER ADDRESS
// 9 -- PES splicing active (Read Only) 
// 8 -- splicing active (Read Only)
// 7:0  splicing countdown (Read Only)
#define AUDIO_SPLICING_CTL                         0x1634
#define AUDIO_SPLICING_CTL_2                       0x1684
#define AUDIO_SPLICING_CTL_3                       0x16d4
// 23:16 M2TS_SKIP_BYTES
// 15:8 LAST TS PACKAGE BYTE COUNT (Read Only)
// 7:0  PACKAGE BYTE COUNT (Read Only)
#define TS_PACKAGE_BYTE_COUNT                      0x1635
#define TS_PACKAGE_BYTE_COUNT_2                    0x1685
#define TS_PACKAGE_BYTE_COUNT_3                    0x16d5
// 15:0 2 bytes strong sync add to PES
#define PES_STRONG_SYNC                            0x1636
#define PES_STRONG_SYNC_2                          0x1686
#define PES_STRONG_SYNC_3                          0x16d6
// bit 15 -- stb_om_ren
// bit 14:11 -- reserved
// bit  10:0 -- OM_DATA_RD_ADDR
#define OM_DATA_RD_ADDR                            0x1637
#define OM_DATA_RD_ADDR_2                          0x1687
#define OM_DATA_RD_ADDR_3                          0x16d7
// bit 15:0 -- OM_DATA_RD
#define OM_DATA_RD                                 0x1638
#define OM_DATA_RD_2                               0x1688
#define OM_DATA_RD_3                               0x16d8
// AUTO STOP SETTING for 32 channels
// 4-nbits per channel
// when write
// bit 3 -- set section active
// bit 2:0 -- auto stop after count (0 means never stop)
// when read
// bit 3 -- current active status (1 - active, 0 - stopped )
// bit 2:0 -- count down to auto stop
// section 31:24
#define SECTION_AUTO_STOP_3                        0x1639
#define SECTION_AUTO_STOP_3_2                      0x1689
#define SECTION_AUTO_STOP_3_3                      0x16d9
// section 23:16
#define SECTION_AUTO_STOP_2                        0x163a
#define SECTION_AUTO_STOP_2_2                      0x168a
#define SECTION_AUTO_STOP_2_3                      0x16da
// section 15:8
#define SECTION_AUTO_STOP_1                        0x163b
#define SECTION_AUTO_STOP_1_2                      0x168b
#define SECTION_AUTO_STOP_1_3                      0x16db
// section 7:0
#define SECTION_AUTO_STOP_0                        0x163c
#define SECTION_AUTO_STOP_0_2                      0x168c
#define SECTION_AUTO_STOP_0_3                      0x16dc
// bit 31:0 reset channel status - each bit reset each channel 
// read -- 32 channel status 
#define DEMUX_CHANNEL_RESET                        0x163d
#define DEMUX_CHANNEL_RESET_2                      0x168d
#define DEMUX_CHANNEL_RESET_3                      0x16dd
#define DEMUX_SCRAMBLING_STATE                     0x163e
#define DEMUX_SCRAMBLING_STATE_2                   0x168e
#define DEMUX_SCRAMBLING_STATE_3                   0x16de
#define DEMUX_CHANNEL_ACTIVITY                     0x163f
#define DEMUX_CHANNEL_ACTIVITY_2                   0x168f
#define DEMUX_CHANNEL_ACTIVITY_3                   0x16df
// bit 4 -- video_stamp_use_dts
// bit 3 -- audio_stamp_sync_1_en 
// bit 2 -- audio_stamp_insert_en 
// bit 1 -- video_stamp_sync_1_en 
// bit 0 -- video_stamp_insert_en 
#define DEMUX_STAMP_CTL                            0x1640
#define DEMUX_STAMP_CTL_2                          0x1690
#define DEMUX_STAMP_CTL_3                          0x16e0
#define DEMUX_VIDEO_STAMP_SYNC_0                   0x1641
#define DEMUX_VIDEO_STAMP_SYNC_0_2                 0x1691
#define DEMUX_VIDEO_STAMP_SYNC_0_3                 0x16e1
#define DEMUX_VIDEO_STAMP_SYNC_1                   0x1642
#define DEMUX_VIDEO_STAMP_SYNC_1_2                 0x1692
#define DEMUX_VIDEO_STAMP_SYNC_1_3                 0x16e2
#define DEMUX_AUDIO_STAMP_SYNC_0                   0x1643
#define DEMUX_AUDIO_STAMP_SYNC_0_2                 0x1693
#define DEMUX_AUDIO_STAMP_SYNC_0_3                 0x16e3
#define DEMUX_AUDIO_STAMP_SYNC_1                   0x1644
#define DEMUX_AUDIO_STAMP_SYNC_1_2                 0x1694
#define DEMUX_AUDIO_STAMP_SYNC_1_3                 0x16e4
// Write : Bit[4:0] secter filter number for reset
// Read  : select according to output_section_buffer_valid : 
//         per bit per section buffer valid status
//         or section_buffer_ignore
#define DEMUX_SECTION_RESET                        0x1645
#define DEMUX_SECTION_RESET_2                      0x1695
#define DEMUX_SECTION_RESET_3                      0x16e5
// process_header_no_copy_off   
// synopsys translate_off
// synopsys translate_on

#endif // C_STB_DEFINE_H

