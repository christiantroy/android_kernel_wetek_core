#ifdef CONFIG_AMLOGIC_BACKLIGHT
#ifdef CONFIG_AML_LCD_BACKLIGHT_SUPPORT
//$$ DEVICE="backlight"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_CHOICE "Bl_pin_0_match" = "pinctrl-0"
//$$ L2 PROP_CHOICE "Bl_pin_1_match" = "pinctrl-1"
//$$ L2 PROP_U32 2= "bl_level_default_uboot_kernel"
//$$ L2 PROP_U32 2= "bl_level_middle_mapping"
//$$ L2 PROP_U32 2= "bl_level_max_min"
//$$ L2 PROP_U32 = "bl_power_on_delay"
//$$ L2 PROP_U32 = "bl_ctrl_method"
//$$ L2 PROP_STR = "bl_gpio_port_on_off"
//$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
//$$ L2 PROP_STR 2 = "bl_pwm_port_gpio_used"
//$$ L2 PROP_U32 = "bl_pwm_freq"
//$$ L2 PROP_U32 2 = "bl_pwm_duty_max_min"
//$$ L2 PROP_U32 = "bl_pwm_combo_high_low_level_switch"
//$$ L2 PROP_STR 2 = "bl_pwm_combo_high_port_method"
//$$ L2 PROP_STR 2 = "bl_pwm_combo_low_port_method"
//$$ L2 PROP_U32 3 = "bl_pwm_combo_high_freq_duty_max_min"
//$$ L2 PROP_U32 3 = "bl_pwm_combo_low_freq_duty_max_min"
	backlight{
		compatible = "amlogic,backlight";
		dev_name = "backlight";
		status = "okay";
		pinctrl-names = "default","pwm_combo";
		pinctrl-0 = <&lcd_backlight_pins>;	/** pwm_default pinmux */
		pinctrl-1 = <&lcd_backlight_combo_pins>;	/** pwm_combo pinmux */
		
		bl_level_default_uboot_kernel=<10 102>;	/** default brightness level for uboot & kernel */
		bl_level_middle_mapping=<128 102>;	/** brightness middle level mapping to a new level*/
		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
		
		/* backlight power ctrl */
		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. 3=pwm_combo. 4=extern. decided by hardware design) */
		
		bl_gpio_port_on_off="GPIODV_28","1","0";	/** backlight control gpio port, (on/off:1=output high, 0=output low, 2=input) */
		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
		bl_pwm_freq=<1000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
		bl_pwm_duty_max_min=<100 25>;	/** brightness diminig duty_max, duty_min : (unit: %, positive logic, only for pwm control method) */
		
		/** backlight pwm_combo control: low_duty_max is always active for level_high, and high_duty_min is always active for level_low */
		bl_pwm_combo_high_low_level_switch=<102>;	/** backlight pwm_combo control switch level */
		bl_pwm_combo_high_port_method="PWM_C","1";	/** backlight pwm_combo high port name, pwm control method(1=pwm_negative, 2=pwm_positive) */
		bl_pwm_combo_low_port_method="PWM_D","2";	/** backlight pwm_combo low port name, pwm control method(1=pwm_negative, 2=pwm_positive) */
		bl_pwm_combo_high_freq_duty_max_min=<300000 90 50>;	/** backlight pwm_combo level_high port frequency(unit: Hz), duty_max, duty_min : (unit: %, positive logic) */
		bl_pwm_combo_low_freq_duty_max_min=<10000 100 50>;	/** backlight pwm_combo level_low port frequency(unit: Hz), duty_max, duty_min : (unit: %, positive logic) */
	};

#endif
#endif